import pandas as pd
import numpy as np
import pickle
import os
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score
from sklearn.preprocessing import LabelEncoder, PowerTransformer
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from gensim.models import Word2Vec
import logging
import sys
import matplotlib.pyplot as plt
import seaborn as sns
from catboost import CatBoostClassifier
from imblearn.over_sampling import SMOTE
import random  # OPTIMIZED: For random search

# --- Configuration ---
BEHAVIORAL_FILE = (
    "/Workspace/Users/jwang77@optumcloud.com/gpd-persona-ai-model-api/"
    "data/s-learning-data/behavior/normalized_us_dce_pro_behavioral_features_0401_2025_0420_2025.csv"
)
PLAN_FILE = (
    "/Workspace/Users/jwang77@optumcloud.com/gpd-persona-ai-model-api/"
    "data/s-learning-data/training/plan_derivation_by_zip.csv"
)
MODEL_FILE = (
    "/Workspace/Users/jwang77@optumcloud.com/gpd-persona-ai-model-api/"
    "data/s-learning-data/models/model-persona-1.1.0.pkl"
)
LABEL_ENCODER_FILE = (
    "/Workspace/Users/jwang77@optumcloud.com/gpd-persona-ai-model-api/"
    "data/s-learning-data/models/label_encoder_1.pkl"
)
TRANSFORMER_FILE = (
    "/Workspace/Users/jwang77@optumcloud.com/gpd-persona-ai-model-api/"
    "data/s-learning-data/models/power_transformer.pkl"
)

PERSONAS = ['dental', 'doctor', 'dsnp', 'drug', 'vision', 'csnp']

# Persona constants
PERSONA_FEATURES = {
    'dental': ['query_dental', 'filter_dental', 'time_dental_pages', 'ma_dental_benefit'],
    'doctor': ['query_provider', 'filter_provider', 'click_provider', 'ma_provider_network'],
    'dsnp': ['query_dsnp', 'filter_dsnp', 'time_dsnp_pages', 'dsnp'],
    'drug': ['query_drug', 'filter_drug', 'time_drug_pages', 'click_drug', 'ma_drug_benefit'],
    'vision': ['query_vision', 'filter_vision', 'time_vision_pages', 'ma_vision'],
    'csnp': ['query_csnp', 'filter_csnp', 'time_csnp_pages', 'csnp']
}
PERSONA_INFO = {
    'csnp': {'plan_col': 'csnp', 'query_col': 'query_csnp', 'filter_col': 'filter_csnp', 'time_col': 'time_csnp_pages'},
    'dental': {'plan_col': 'ma_dental_benefit', 'query_col': 'query_dental', 'filter_col': 'filter_dental', 'time_col': 'time_dental_pages'},
    'doctor': {'plan_col': 'ma_provider_network', 'query_col': 'query_provider', 'filter_col': 'filter_provider', 'click_col': 'click_provider'},
    'dsnp': {'plan_col': 'dsnp', 'query_col': 'query_dsnp', 'filter_col': 'filter_dsnp', 'time_col': 'time_dsnp_pages'},
    'drug': {'plan_col': 'ma_drug_benefit', 'query_col': 'query_drug', 'filter_col': 'filter_drug', 'click_col': 'click_drug', 'time_col': 'time_drug_pages'},
    'vision': {'plan_col': 'ma_vision', 'query_col': 'query_vision', 'filter_col': 'filter_vision', 'time_col': 'time_vision_pages'}
}

# Define the base weights and thresholds
BASE_PERSONA_CLASS_WEIGHT = {
    'drug': 5.0,
    'dental': 15.5,
    'doctor': 12.5,
    'dsnp': 8.5,
    'vision': 6.5,
    'csnp': 4.5
}
BASE_PERSONA_THRESHOLD = {
    'drug': 0.20,
    'dental': 0.08,
    'doctor': 0.05,
    'dsnp': 0.20,
    'vision': 0.18,
    'csnp': 0.20
}

# Enhanced model parameters for balanced accuracy
ENHANCED_PERSONA_CLASS_WEIGHT = {
    'dental': 30.0,
    'doctor': 25.0,
    'drug': 10.0,
    'dsnp': 10.0,
    'vision': 15.0,
    'csnp': 10.0
}

ENHANCED_PERSONA_THRESHOLD = {
    'dental': 0.02,
    'doctor': 0.03,
    'drug': 0.15,
    'dsnp': 0.15,
    'vision': 0.15,
    'csnp': 0.15
}

# OPTIMIZED: Reduced search space and fixed dental parameters
EXTENDED_SEARCH_SPACE = {
    'doctor_weight': [15.0, 25.0, 35.0],  # 3 values
    'drug_weight': [5.0, 10.0, 15.0],     # 3 values
    'dsnp_weight': [5.0, 10.0, 15.0],     # 3 values
    'vision_weight': [10.0, 15.0, 20.0],  # 3 values
    'csnp_weight': [5.0, 10.0, 15.0],     # 3 values
    'doctor_threshold': [0.02, 0.03, 0.04],  # 3 values
    'drug_threshold': [0.10, 0.15, 0.20],    # 3 values
    'dsnp_threshold': [0.10, 0.15, 0.20],    # 3 values
    'vision_threshold': [0.10, 0.15, 0.20],  # 3 values
    'csnp_threshold': [0.10, 0.15, 0.20]     # 3 values
}

# Modified optimization weights
OPTIMIZATION_WEIGHTS = {
    'dental_accuracy': 0.3,
    'doctor_accuracy': 0.3,
    'overall_accuracy': 0.4
}

# Optimization objective
OPTIMIZATION_OBJECTIVE = ['dental_accuracy', 'doctor_accuracy', 'overall_accuracy']

# --- Logging Setup ---
logging.basicConfig(
    level=logging.WARNING,  # OPTIMIZED: Reduced to WARNING to minimize I/O
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)],
    force=True
)
logger = logging.getLogger()
logger.setLevel(logging.WARNING)

# --- Helper Functions ---
def safe_bool_to_int(boolean_value, df):
    if isinstance(boolean_value, pd.Series):
        return boolean_value.astype(int)
    return pd.Series([int(boolean_value)] * len(df), index=df.index)

def get_feature_as_series(df, col_name, default=0):
    if col_name in df.columns:
        return df[col_name]
    return pd.Series([default] * len(df), index=df.index)

def normalize_persona(df):
    valid_personas = PERSONAS
    new_rows = []
    invalid_personas = set()
    dropped_rows = 0
    
    for _, row in df.iterrows():
        persona = row['persona']
        if pd.isna(persona) or not persona:
            dropped_rows += 1
            continue
        
        try:
            personas = [p.strip().lower() for p in str(persona).split(',')]
        except Exception as e:
            logger.warning(f"Error processing persona value {persona}: {str(e)}")
            dropped_rows += 1
            continue
        
        valid_found = [p for p in personas if p in valid_personas]
        if not valid_found:
            invalid_personas.update(personas)
            dropped_rows += 1
            continue
        
        for valid_persona in valid_found:
            row_copy = row.copy()
            row_copy['persona'] = valid_persona
            new_rows.append(row_copy)
    
    result = pd.DataFrame(new_rows).reset_index(drop=True)
    logger.info(f"Rows after persona normalization: {len(result)} (Dropped {dropped_rows} rows)")
    if invalid_personas:
        logger.info(f"Invalid personas found: {invalid_personas}")
    if result.empty:
        logger.error(f"No valid personas found. Valid personas: {valid_personas}")
        raise ValueError("No valid personas found")
    return result

def calculate_persona_weight(row, persona_info, persona):
    query_col = persona_info['query_col']
    filter_col = persona_info['filter_col']
    plan_col = persona_info.get('plan_col', None)
    click_col = persona_info.get('click_col', None)
    
    query_value = row.get(query_col, 0) if pd.notna(row.get(query_col, np.nan)) else 0
    filter_value = row.get(filter_col, 0) if pd.notna(row.get(filter_col, np.nan)) else 0
    plan_value = row.get(plan_col, 0) if plan_col and pd.notna(row.get(plan_col, np.nan)) else 0
    click_value = row.get(click_col, 0) if click_col and pd.notna(row.get(click_col, np.nan)) else 0
    
    max_val = max([query_value, filter_value, plan_value, click_value, 1])
    if max_val > 0:
        query_value /= max_val
        filter_value /= max_val
        plan_value /= max_val
        click_value /= max_val
    
    weight = 0.25 * (query_value + filter_value + plan_value + click_value)
    return min(max(weight, 0), 1.0)

def load_data(behavioral_path, plan_path):
    try:
        if not os.path.exists(behavioral_path):
            raise FileNotFoundError(f"Behavioral file not found: {behavioral_path}")
        if not os.path.exists(plan_path):
            raise FileNotFoundError(f"Plan file not found: {plan_path}")
        
        behavioral_df = pd.read_csv(behavioral_path)
        logger.info(f"Raw behavioral data rows: {len(behavioral_df)}")
        
        if 'persona' not in behavioral_df.columns:
            logger.error("Persona column missing in behavioral data")
            raise ValueError("Persona column required for evaluation ground truth")
        
        persona_mapping = {'fitness': 'otc', 'hearing': 'vision'}
        behavioral_df['persona'] = behavioral_df['persona'].replace(persona_mapping)
        behavioral_df['persona'] = behavioral_df['persona'].astype(str).str.lower().str.strip()
        
        behavioral_df['zip'] = behavioral_df['zip'].fillna('unknown')
        behavioral_df['plan_id'] = behavioral_df['plan_id'].fillna('unknown')
        if 'total_session_time' in behavioral_df.columns:
            behavioral_df['total_session_time'] = behavioral_df['total_session_time'].fillna(0)
        
        plan_df = pd.read_csv(plan_path)
        plan_df['zip'] = plan_df['zip'].astype(str).str.strip()
        plan_df['plan_id'] = plan_df['plan_id'].astype(str).str.strip()
        
        return behavioral_df, plan_df
    except Exception as e:
        logger.error(f"Failed to load data: {str(e)}")
        raise

def prepare_features(behavioral_df, plan_df, expected_features=None):
    try:
        behavioral_df = normalize_persona(behavioral_df)
        
        if behavioral_df.empty:
            raise ValueError("No valid data after persona normalization")
        
        training_df = behavioral_df.merge(
            plan_df.rename(columns={'StateCode': 'state'}),
            how='left', on=['zip', 'plan_id']
        ).reset_index(drop=True)
        
        if 'persona' not in training_df.columns:
            raise ValueError("Persona column required in training_df")
        
        plan_features = ['ma_dental_benefit', 'ma_vision', 'dsnp', 'ma_drug_benefit', 'ma_provider_network', 'csnp']
        for col in plan_features:
            training_df[col] = training_df.get(col, 0).fillna(0)
        
        behavioral_features = [
            'query_dental', 'query_drug', 'query_provider', 'query_vision', 'query_csnp', 'query_dsnp',
            'filter_dental', 'filter_drug', 'filter_provider', 'filter_vision', 'filter_csnp', 'filter_dsnp',
            'num_pages_viewed', 'total_session_time', 'time_dental_pages', 'num_clicks',
            'time_csnp_pages', 'time_drug_pages', 'time_vision_pages', 'time_dsnp_pages'
        ]
        
        sparse_features = ['query_dental', 'time_dental_pages', 'query_vision', 'time_vision_pages', 'query_drug', 'query_provider']
        imputer_median = SimpleImputer(strategy='median')
        imputer_zero = SimpleImputer(strategy='constant', fill_value=0)
        
        for col in behavioral_features:
            if col in training_df.columns:
                if col in sparse_features:
                    training_df[col] = imputer_zero.fit_transform(training_df[[col]]).flatten()
                else:
                    training_df[col] = imputer_median.fit_transform(training_df[[col]]).flatten()
            else:
                training_df[col] = 0
        
        for persona in ['dental', 'vision']:
            query_col = PERSONA_INFO[persona]['query_col']
            time_col = PERSONA_INFO[persona].get('time_col', None)
            if query_col in training_df.columns and time_col in training_df.columns:
                strong_signal = (training_df[query_col] > training_df[query_col].quantile(0.9)) | \
                               (training_df[time_col] > training_df[time_col].quantile(0.9))
                training_df.loc[strong_signal, query_col] *= 1.5
                training_df.loc[strong_signal, time_col] *= 1.5
        
        if 'start_time' in training_df.columns:
            try:
                start_time = pd.to_datetime(training_df['start_time'], errors='coerce')
                training_df['recency'] = (pd.to_datetime('2025-04-25') - start_time).dt.days.fillna(30)
                training_df['time_of_day'] = start_time.dt.hour.fillna(12) // 6
                training_df['visit_frequency'] = training_df.groupby('userid')['start_time'].transform('count').fillna(1) / 30 if 'userid' in training_df.columns else 1
            except:
                training_df['recency'] = 30
                training_df['time_of_day'] = 2
                training_df['visit_frequency'] = 1
        else:
            training_df['recency'] = 30
            training_df['visit_frequency'] = 1
            training_df['time_of_day'] = 2
        
        cluster_features = ['num_pages_viewed', 'total_session_time', 'num_clicks']
        if all(col in training_df.columns for col in cluster_features):
            kmeans = KMeans(n_clusters=5, random_state=42)
            training_df['user_cluster'] = kmeans.fit_predict(training_df[cluster_features].fillna(0))
        else:
            training_df['user_cluster'] = 0
        
        training_df['dental_time_ratio'] = training_df.get('time_dental_pages', 0) / (training_df.get('total_session_time', 1) + 1e-5)
        training_df['click_ratio'] = training_df.get('num_clicks', 0) / (training_df.get('num_pages_viewed', 1) + 1e-5)
        
        # OPTIMIZED: Skip Word2Vec embeddings to save time
        embedding_cols = [f'plan_emb_{i}' for i in range(10)]
        training_df[embedding_cols] = 0
        
        query_cols = [c for c in behavioral_features if c.startswith('query_') and c in training_df.columns]
        filter_cols = [c for c in behavioral_features if c.startswith('filter_') and c in training_df.columns]
        training_df['query_count'] = training_df[query_cols].sum(axis=1) if query_cols else 0
        training_df['filter_count'] = training_df[filter_cols].sum(axis=1) if filter_cols else 0
        
        for persona in PERSONAS:
            if persona in PERSONA_INFO:
                training_df[f'{persona}_weight'] = training_df.apply(
                    lambda row: calculate_persona_weight(row, PERSONA_INFO[persona], persona), axis=1
                )
        
        additional_features = []
        for persona in PERSONAS:
            persona_info = PERSONA_INFO.get(persona, {})
            query_col = get_feature_as_series(training_df, persona_info.get('query_col'))
            filter_col = get_feature_as_series(training_df, persona_info.get('filter_col'))
            click_col = get_feature_as_series(training_df, persona_info.get('click_col', 'dummy_col'))
            time_col = get_feature_as_series(training_df, persona_info.get('time_col', 'dummy_col'))
            plan_col = get_feature_as_series(training_df, persona_info.get('plan_col'))
            
            signal_weights = 3.5 if persona == 'drug' else 3.0
            training_df[f'{persona}_signal'] = (
                query_col * 2.0 +
                filter_col * 2.0 +
                time_col.clip(upper=5) * 1.5 +
                click_col * 2.0
            ) * signal_weights
            additional_features.append(f'{persona}_signal')
        
        feature_columns = behavioral_features + plan_features + additional_features + [
            'recency', 'visit_frequency', 'time_of_day', 'user_cluster', 'dental_time_ratio', 'click_ratio'
        ] + embedding_cols + [f'{persona}_weight' for persona in PERSONAS if persona in PERSONA_INFO]
        
        X = training_df[feature_columns].fillna(0)
        y = training_df['persona']
        
        if expected_features is not None:
            missing_features = [f for f in expected_features if f not in X.columns]
            if missing_features:
                raise ValueError(f"Missing features: {missing_features}")
            extra_features = [f for f in X.columns if f not in expected_features]
            if extra_features:
                X = X[expected_features]
        
        return X, y
    except Exception as e:
        logger.error(f"Failed to prepare features: {str(e)}")
        raise

def create_specialized_persona_features(df, persona):
    """Create specialized features for a given persona."""
    print(f"Creating specialized features for {persona}...")
    
    persona_info = PERSONA_INFO.get(persona, {})
    query_col = persona_info.get('query_col', f'query_{persona}')
    filter_col = persona_info.get('filter_col', f'filter_{persona}')
    time_col = persona_info.get('time_col', f'time_{persona}_pages')
    plan_col = persona_info.get('plan_col', f'ma_{persona}_benefit')
    
    query = get_feature_as_series(df, query_col)
    filter_val = get_feature_as_series(df, filter_col)
    time = get_feature_as_series(df, time_col)
    plan = get_feature_as_series(df, plan_col)
    
    # OPTIMIZED: Reduced to 4 features
    df[f'{persona}_super_signal'] = (
        np.log1p(query * 10) * 5.0 +
        np.log1p(filter_val * 10) * 5.0 +
        np.log1p(time.clip(upper=5) * 5) * 4.0
    ) * 10.0
    
    df[f'{persona}_exclusivity'] = (query + filter_val + time) / (
        sum(get_feature_as_series(df, PERSONA_INFO[p].get('query_col', f'query_{p}')) for p in PERSONAS if p != persona) + 1e-8
    ).fillna(0) * 15.0
    
    df[f'{persona}_plan_indicator'] = (plan > 0).astype(int) * 20.0
    
    df[f'{persona}_query_strong'] = (query > 0.5).astype(int) * 15.0
    
    new_features = [
        f'{persona}_super_signal', f'{persona}_exclusivity',
        f'{persona}_plan_indicator', f'{persona}_query_strong'
    ]
    print(f"Created {len(new_features)} specialized features for {persona}.")
    return df, new_features

def custom_ensemble_with_balanced_focus(predictions, binary_probas, le, weights=None, thresholds=None):
    if weights is None:
        weights = ENHANCED_PERSONA_CLASS_WEIGHT
    if thresholds is None:
        thresholds = ENHANCED_PERSONA_THRESHOLD
    
    weighted_preds = np.copy(predictions)
    
    for i, persona in enumerate(le.classes_):
        weighted_preds[:, i] *= weights.get(persona, 1.0)
    
    if binary_probas:
        for persona, proba in binary_probas.items():
            persona_idx = np.where(le.classes_ == persona)[0][0]
            blend_weight = 0.4
            weighted_preds[:, persona_idx] = (1 - blend_weight) * weighted_preds[:, persona_idx] + blend_weight * proba * 10.0
    
    row_sums = weighted_preds.sum(axis=1, keepdims=True)
    normalized_preds = weighted_preds / (row_sums + 1e-8)
    
    predictions = np.zeros(len(normalized_preds), dtype=np.int32)
    for i in range(len(normalized_preds)):
        max_prob = -1
        max_idx = -1
        for j, persona in enumerate(le.classes_):
            prob = normalized_preds[i, j]
            threshold = thresholds.get(persona, 0.2)
            if prob > threshold and prob > max_prob:
                max_prob = prob
                max_idx = j
        if max_idx >= 0:
            predictions[i] = max_idx
        else:
            predictions[i] = np.argmax(normalized_preds[i])
    
    return predictions, normalized_preds

def compute_per_persona_accuracy(y_true, y_pred, classes, class_names):
    per_persona_accuracy = {}
    for cls_idx, cls_name in enumerate(class_names):
        mask = y_true == cls_idx
        if mask.sum() > 0:
            cls_accuracy = accuracy_score(y_true[mask], y_pred[mask])
            per_persona_accuracy[cls_name] = cls_accuracy * 100
        else:
            per_persona_accuracy[cls_name] = 0.0
    return per_persona_accuracy

def evaluate_model_with_params(class_weights, thresholds, main_model, binary_classifiers, le, transformer, X_test, y_test_encoded, X_test_cols):
    try:
        y_pred_probas_multi = main_model.predict_proba(transformer.transform(X_test))

        binary_probas = {}
        for persona in le.classes_:
            if persona in binary_classifiers:
                binary_probas[persona] = binary_classifiers[persona].predict_proba(transformer.transform(X_test))[:, 1]
            else:
                binary_probas[persona] = np.zeros(len(X_test))

        y_pred_probas_multi_blended = np.copy(y_pred_probas_multi)
        for i, persona in enumerate(le.classes_):
            if persona in binary_probas and binary_probas[persona].sum() > 0:
                blend_ratio = 0.4
                y_pred_probas_multi_blended[:, i] = blend_ratio * y_pred_probas_multi_blended[:, i] + (1-blend_ratio) * binary_probas[persona]
            y_pred_probas_multi_blended[:, i] *= class_weights.get(persona, 1.0)

        y_pred_probas_multi_normalized = y_pred_probas_multi_blended / y_pred_probas_multi_blended.sum(axis=1, keepdims=True)

        y_pred = np.zeros(y_pred_probas_multi_normalized.shape[0], dtype=int)
        for i in range(y_pred_probas_multi_normalized.shape[0]):
            max_prob = -1
            max_idx = 0
            for j, persona in enumerate(le.classes_):
                prob = y_pred_probas_multi_normalized[i, j]
                threshold = thresholds.get(persona, 0.5)
                if prob > threshold and prob > max_prob:
                    max_prob = prob
                    max_idx = j
            y_pred[i] = max_idx

        overall_acc = accuracy_score(y_test_encoded, y_pred)
        macro_f1 = f1_score(y_test_encoded, y_pred, average='macro')
        per_persona_acc = compute_per_persona_accuracy(y_test_encoded, y_pred, le.classes_, le.classes_)
        dental_acc = per_persona_acc.get('dental', 0.0)
        doctor_acc = per_persona_acc.get('doctor', 0.0)

        return overall_acc, dental_acc, doctor_acc, macro_f1, y_pred
    except Exception as e:
        logger.error(f"Error in model evaluation: {str(e)}")
        raise

def is_better_combination(current_metrics, best_metrics, objectives, weights=None):
    if weights is None:
        weights = OPTIMIZATION_WEIGHTS
    
    current_score = sum(current_metrics[obj] * weights.get(obj, 1.0) for obj in objectives)
    best_score = sum(best_metrics[obj] * weights.get(obj, 1.0) for obj in objectives)
    
    return current_score > best_score + 1e-5

def load_model_and_encoder(model_file, label_encoder_file):
    try:
        with open(model_file, 'rb') as f:
            model = pickle.load(f)
        with open(label_encoder_file, 'rb') as f:
            le = pickle.load(f)
        return model, le
    except Exception as e:
        print(f"Error loading model or label encoder: {e}")
        raise

def train_enhanced_balanced_model(X_train, y_train, le):
    print("Training enhanced balanced model...")
    
    X_train_df = pd.DataFrame(X_train, columns=X_train.columns)
    all_new_features = []
    
    for persona in PERSONAS:
        X_train_df, new_features = create_specialized_persona_features(X_train_df, persona)
        all_new_features.extend(new_features)
    
    y_train_arr = np.array(y_train)
    
    try:
        # OPTIMIZED: Reduced oversampling targets
        total_samples = len(y_train_arr)
        samples_per_class = {
            'dental': int(total_samples * 0.15),
            'vision': int(total_samples * 0.10),
            'doctor': int(total_samples * 0.10),
            'dsnp': int(total_samples * 0.10),
            'drug': int(total_samples * 0.10),
            'csnp': int(total_samples * 0.10)
        }
        
        print("Applying balanced oversampling...")
        smote = SMOTE(sampling_strategy=samples_per_class, random_state=42)
        # OPTIMIZED: Use subset of features for SMOTE
        smote_features = [f for f in X_train_df.columns if f in PERSONA_FEATURES.get(f.split('_')[0], []) or 'signal' in f]
        X_resampled, y_resampled = smote.fit_resample(X_train_df[smote_features], y_train_arr)
        
        # Reconstruct full feature set
        X_resampled_full = pd.DataFrame(X_resampled, columns=smote_features)
        for col in X_train_df.columns:
            if col not in smote_features:
                X_resampled_full[col] = X_train_df[col].iloc[:len(X_resampled)].fillna(0).values
        
    except Exception as e:
        print(f"Error in oversampling: {e}. Using original data.")
        X_resampled_full, y_resampled = X_train_df, y_train_arr
    
    print("Training balanced model...")
    
    class_weights = {i: ENHANCED_PERSONA_CLASS_WEIGHT[cls] for i, cls in enumerate(le.classes_)}
    
    model = CatBoostClassifier(
        iterations=500,  # OPTIMIZED: Reduced from 1500
        learning_rate=0.01,
        depth=8,
        l2_leaf_reg=3,
        random_strength=0.8,
        class_weights=class_weights,
        loss_function='MultiClass',
        auto_class_weights='Balanced',
        random_seed=42,
        verbose=100,
        early_stopping_rounds=50  # OPTIMIZED: Added early stopping
    )
    
    model.fit(X_resampled_full, y_resampled)
    
    print("Enhanced balanced model trained successfully")
    return model, X_resampled_full.columns.tolist()

def improved_evaluation_workflow():
    print("Starting improved evaluation workflow...")
    
    try:
        behavioral_df, plan_df = load_data(BEHAVIORAL_FILE, PLAN_FILE)
    except Exception as e:
        print(f"Error loading data: {e}")
        return None
    
    try:
        base_model, le = load_model_and_encoder(MODEL_FILE, LABEL_ENCODER_FILE)
    except Exception as e:
        print(f"Error loading model or encoder: {e}")
        return None
    
    try:
        X, y = prepare_features(behavioral_df, plan_df, expected_features=base_model.feature_names_)
    except Exception as e:
        print(f"Error preparing features: {e}")
        return None
    
    try:
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
    except Exception as e:
        print(f"Error splitting data: {e}")
        return None
    
    try:
        enhanced_model, enhanced_features = train_enhanced_balanced_model(X_train, y_train, le)
    except Exception as e:
        print(f"Error training enhanced model: {e}")
        return None
    
    binary_classifiers = {}
    for persona in PERSONAS:
        print(f"Training binary classifier for {persona}...")
        y_binary = (y_train == persona).astype(int)
        
        pos_ratio = y_binary.mean()
        neg_weight = 1.0
        pos_weight = 1.0 / (pos_ratio + 1e-8) * 3
        
        model = CatBoostClassifier(
            iterations=300,  # OPTIMIZED: Reduced from 1000
            learning_rate=0.01,
            depth=6,
            l2_leaf_reg=3,
            class_weights={0: neg_weight, 1: pos_weight},
            loss_function='Logloss',
            random_seed=42,
            verbose=100,
            early_stopping_rounds=50  # OPTIMIZED: Added early stopping
        )
        
        try:
            if y_binary.sum() > 5:
                model.fit(X_train, y_binary)
                binary_classifiers[persona] = model
                print(f"Binary {persona} classifier trained successfully")
            else:
                print(f"Skipping binary classifier for {persona} due to insufficient samples")
        except Exception as e:
            print(f"Error training binary classifier for {persona}: {e}")
    
    print("\nEvaluating models on test set...")
    
    try:
        with open(TRANSFORMER_FILE, 'rb') as f:
            transformer = pickle.load(f)
    except Exception as e:
        print(f"Error loading transformer: {e}")
        return None
    
    try:
        X_test_transformed = transformer.transform(X_test)
        base_probas = base_model.predict_proba(X_test_transformed)
    except Exception as e:
        print(f"Error getting base model predictions: {e}")
        return None
    
    try:
        enhanced_probas = enhanced_model.predict_proba(X_test_transformed)
    except Exception as e:
        print(f"Error getting enhanced model predictions: {e}")
        return None
    
    binary_probas = {}
    for persona, model in binary_classifiers.items():
        try:
            binary_probas[persona] = model.predict_proba(X_test_transformed)[:, 1]
        except Exception as e:
            print(f"Error getting binary classifier probabilities for {persona}: {e}")
            binary_probas[persona] = np.zeros(len(X_test))
    
    try:
        blended_probas = 0.3 * base_probas + 0.7 * enhanced_probas
        y_pred_indices, final_probas = custom_ensemble_with_balanced_focus(
            blended_probas, binary_probas, le,
            weights=ENHANCED_PERSONA_CLASS_WEIGHT,
            thresholds=ENHANCED_PERSONA_THRESHOLD
        )
        y_pred = le.classes_[y_pred_indices]
    except Exception as e:
        print(f"Error in ensemble prediction: {e}")
        return None
    
    overall_acc = accuracy_score(y_test, y_pred)
    print(f"\nOverall Accuracy: {overall_acc * 100:.2f}%")
    
    print("\nPer-Persona Metrics:")
    for persona in le.classes_:
        mask = (y_test == persona)
        if mask.sum() > 0:
            persona_acc = accuracy_score(y_test[mask], y_pred[mask])
            print(f"{persona}: {persona_acc * 100:.2f}% ({mask.sum()} samples)")
    
    for persona in PERSONAS:
        mask = (y_test == persona)
        if mask.sum() > 0:
            y_pred_persona = y_pred[mask]
            correct = (y_pred_persona == persona).sum()
            print(f"\nDetailed {persona.capitalize()} Analysis:")
            print(f"Total {persona} samples in test set: {mask.sum()}")
            print(f"Correctly predicted {persona} samples: {correct} ({correct/mask.sum()*100:.2f}%)")
            if mask.sum() - correct > 0:
                print(f"Misclassified {persona} samples:")
                misclassified = pd.DataFrame({
                    'True': [persona] * (mask.sum() - correct),
                    'Predicted': y_pred_persona[y_pred_persona != persona]
                })
                print(misclassified['Predicted'].value_counts())
    
    try:
        improved_model_path = MODEL_FILE.replace('.pkl', '_improved_balanced.pkl')
        with open(improved_model_path, 'wb') as f:
            pickle.dump(enhanced_model, f)
        print(f"\nImproved model saved to: {improved_model_path}")
    except Exception as e:
        print(f"Error saving improved model: {e}")
    
    for persona, model in binary_classifiers.items():
        try:
            binary_model_path = MODEL_FILE.replace('.pkl', f'_{persona}_binary_improved.pkl')
            with open(binary_model_path, 'wb') as f:
                pickle.dump(model, f)
            print(f"Binary {persona} classifier saved to: {binary_model_path}")
        except Exception as e:
            print(f"Error saving binary classifier for {persona}: {e}")
    
    return {
        'overall_accuracy': overall_acc * 100,
        'per_persona_accuracy': {persona: accuracy_score(y_test[y_test == persona], y_pred[y_test == persona]) * 100 
                                if (y_test == persona).sum() > 0 else 0 for persona in PERSONAS}
    }

def create_visualizations(behavioral_df, plan_df, main_model, le, transformer):
    try:
        X_full, y_full = prepare_features(behavioral_df, plan_df, expected_features=main_model.feature_names_)
        
        X_train, X_test, y_train, y_test = train_test_split(
            X_full, y_full, test_size=0.2, random_state=42, stratify=y_full)
        
        X_test_transformed = transformer.transform(X_test)
        base_probas = main_model.predict_proba(X_test_transformed)
        
        binary_classifiers = {}
        binary_probas = {}
        for persona in PERSONAS:
            binary_model_path = MODEL_FILE.replace('.pkl', f'_{persona}_binary_improved.pkl')
            if os.path.exists(binary_model_path):
                with open(binary_model_path, 'rb') as f:
                    binary_classifiers[persona] = pickle.load(f)
                binary_probas[persona] = binary_classifiers[persona].predict_proba(X_test_transformed)[:, 1]
            else:
                binary_probas[persona] = np.zeros(len(X_test))
        
        y_pred_indices, _ = custom_ensemble_with_balanced_focus(
            base_probas, binary_probas, le,
            weights=ENHANCED_PERSONA_CLASS_WEIGHT,
            thresholds=ENHANCED_PERSONA_THRESHOLD
        )
        y_pred = le.classes_[y_pred_indices]
        
        plt.figure(figsize=(12, 9))
        cm = confusion_matrix(y_test, y_pred, labels=PERSONAS)
        cm_normalized = cm.astype('float') / (cm.sum(axis=1)[:, np.newaxis] + 1e-8)
        
        sns.heatmap(cm_normalized, annot=True, fmt='.2f', cmap='Blues',
                    xticklabels=PERSONAS, yticklabels=PERSONAS)
        plt.title('Normalized Confusion Matrix')
        plt.ylabel('True Label')
        plt.xlabel('Predicted Label')
        plt.tight_layout()
        plt.show()
        
        plt.figure(figsize=(10, 6))
        persona_acc = {}
        for persona in PERSONAS:
            mask = (y_test == persona)
            if mask.sum() > 0:
                persona_acc[persona] = accuracy_score(y_test[mask], y_pred[mask]) * 100
            else:
                persona_acc[persona] = 0
        
        acc_df = pd.DataFrame({
            'Persona': list(persona_acc.keys()),
            'Accuracy (%)': list(persona_acc.values())
        }).sort_values('Accuracy (%)', ascending=False)
        
        sns.barplot(data=acc_df, x='Persona', y='Accuracy (%)', palette='viridis')
        plt.title('Model Accuracy by Persona Type')
        plt.axhline(y=acc_df['Accuracy (%)'].mean(), color='r', linestyle='--', label='Mean Accuracy')
        plt.legend()
        plt.ylim(0, 100)
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()
        
        print("\nPer-Persona Accuracy:")
        for persona, acc in acc_df.set_index('Persona')['Accuracy (%)'].items():
            print(f"{persona}: {acc:.2f}%")
        
        print(f"\nOverall Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%")
        
    except Exception as e:
        print(f"Error creating visualizations: {str(e)}")

# --- Main Tuning Logic ---
if __name__ == "__main__":
    logger.info("Starting hyperparameter tuning...")
    
    try:
        if not os.path.exists(MODEL_FILE):
            raise FileNotFoundError(f"Model file not found: {MODEL_FILE}")
        with open(MODEL_FILE, 'rb') as f:
            main_model = pickle.load(f)
        if not os.path.exists(LABEL_ENCODER_FILE):
            raise FileNotFoundError(f"Label encoder file not found: {LABEL_ENCODER_FILE}")
        with open(LABEL_ENCODER_FILE, 'rb') as f:
            le = pickle.load(f)
        if not os.path.exists(TRANSFORMER_FILE):
            raise FileNotFoundError(f"Transformer file not found: {TRANSFORMER_FILE}")
        with open(TRANSFORMER_FILE, 'rb') as f:
            transformer = pickle.load(f)
    except Exception as e:
        logger.error(f"Failed to load model or files: {str(e)}")
        sys.exit(1)
    
    expected_features = getattr(main_model, 'feature_names_', None)
    if expected_features is None:
        logger.error("Model does not provide feature_names_. Please specify expected features manually.")
        sys.exit(1)
    
    try:
        behavioral_df, plan_df = load_data(BEHAVIORAL_FILE, PLAN_FILE)
        X_data, y_data = prepare_features(behavioral_df, plan_df, expected_features)
        y_data_encoded = le.transform(y_data)
        X_data_cols = X_data.columns
    except Exception as e:
        logger.error(f"Failed to load and prepare data: {str(e)}")
        sys.exit(1)
    
    best_metrics = {obj: -1 for obj in OPTIMIZATION_OBJECTIVE}
    best_params = {}
    
    logger.info("Starting random search...")
    # OPTIMIZED: Random search with 100 iterations
    n_iterations = 100
    tested_combinations = 0
    
    for _ in range(n_iterations):
        tested_combinations += 1
        # Fix dental parameters
        current_weights = {'dental': 30.0}
        current_thresholds = {'dental': 0.02}
        
        # Randomly sample other parameters
        current_weights.update({
            'doctor': random.choice(EXTENDED_SEARCH_SPACE['doctor_weight']),
            'drug': random.choice(EXTENDED_SEARCH_SPACE['drug_weight']),
            'dsnp': random.choice(EXTENDED_SEARCH_SPACE['dsnp_weight']),
            'vision': random.choice(EXTENDED_SEARCH_SPACE['vision_weight']),
            'csnp': random.choice(EXTENDED_SEARCH_SPACE['csnp_weight'])
        })
        current_thresholds.update({
            'doctor': random.choice(EXTENDED_SEARCH_SPACE['doctor_threshold']),
            'drug': random.choice(EXTENDED_SEARCH_SPACE['drug_threshold']),
            'dsnp': random.choice(EXTENDED_SEARCH_SPACE['dsnp_threshold']),
            'vision': random.choice(EXTENDED_SEARCH_SPACE['vision_threshold']),
            'csnp': random.choice(EXTENDED_SEARCH_SPACE['csnp_threshold'])
        })
        
        if tested_combinations % 10 == 0:  # OPTIMIZED: Log every 10th iteration
            logger.info(f"Testing combination {tested_combinations}/{n_iterations}: Weights={current_weights}, Thresholds={current_thresholds}")
        
        binary_classifiers = {}
        for persona in PERSONAS:
            binary_model_path = MODEL_FILE.replace('.pkl', f'_{persona}_binary_improved.pkl')
            if os.path.exists(binary_model_path):
                with open(binary_model_path, 'rb') as f:
                    binary_classifiers[persona] = pickle.load(f)
        
        overall_acc, dental_acc, doctor_acc, macro_f1, y_pred = evaluate_model_with_params(
            current_weights, current_thresholds, main_model, binary_classifiers,
            le, transformer, X_data, y_data_encoded, X_data_cols
        )
        
        if tested_combinations % 10 == 0:
            logger.info(f"Results: Overall Acc={overall_acc*100:.2f}%, Dental Acc={dental_acc:.2f}%, Doctor Acc={doctor_acc:.2f}%, Macro F1={macro_f1:.2f}")
        
        current_metrics = {
            'dental_accuracy': dental_acc,
            'doctor_accuracy': doctor_acc,
            'overall_accuracy': overall_acc * 100
        }
        
        if is_better_combination(current_metrics, best_metrics, OPTIMIZATION_OBJECTIVE, weights=OPTIMIZATION_WEIGHTS):
            logger.info("Found a better combination!")
            best_metrics.update(current_metrics)
            best_params = {'weights': current_weights, 'thresholds': current_thresholds}
    
    logger.info("\n--- Tuning Complete ---")
    if best_params:
        logger.info(f"Best parameters found: Weights={best_params['weights']}, Thresholds={best_params['thresholds']}")
        logger.info("Corresponding metrics:")
        for obj, value in best_metrics.items():
            logger.info(f"  {obj}: {value:.2f}%")
    else:
        logger.warning("No better combination found.")
        binary_classifiers = {}
        for persona in PERSONAS:
            binary_model_path = MODEL_FILE.replace('.pkl', f'_{persona}_binary_improved.pkl')
            if os.path.exists(binary_model_path):
                with open(binary_model_path, 'rb') as f:
                    binary_classifiers[persona] = pickle.load(f)
        overall_acc, dental_acc, doctor_acc, macro_f1, _ = evaluate_model_with_params(
            ENHANCED_PERSONA_CLASS_WEIGHT, ENHANCED_PERSONA_THRESHOLD, main_model, binary_classifiers,
            le, transformer, X_data, y_data_encoded, X_data_cols
        )
        logger.info(f"Default metrics: Overall Acc={overall_acc*100:.2f}%, Dental Acc={dental_acc:.2f}%, Doctor Acc={doctor_acc:.2f}%, Macro F1={macro_f1:.2f}")

    print("\n==============================================")
    print("Starting balanced accuracy improvement workflow")
    print("==============================================\n")
    
    results = improved_evaluation_workflow()
    
    print("\n============ FINAL RESULTS ============")
    if results:
        print(f"Overall Accuracy: {results['overall_accuracy']:.2f}%")
        for persona, acc in results['per_persona_accuracy'].items():
            print(f"{persona.capitalize()} Accuracy: {acc:.2f}%")
    print("=========================================")
    
    print("\nCreating visualizations...")
    create_visualizations(behavioral_df, plan_df, main_model, le, transformer)

# --- Model Performance Improvement Strategy ---
"""
Optimized to run in under 5-10 minutes while addressing 0% accuracy for doctor, dsnp, drug, vision, csnp:
1. Random Search: 100 iterations instead of 314,928.
2. Reduced Oversampling: 15% dental, 10% others; used subset of features for SMOTE.
3. Faster Training: 500 iterations for main model, 300 for binary classifiers, with early stopping.
4. Simplified Features: 4 features per persona, skipped Word2Vec embeddings.
5. Fixed Dental Parameters: Weight=30.0, threshold=0.02 to maintain high dental accuracy.
6. Reduced Logging: WARNING level, log every 10th iteration.
These changes maintain balanced predictions while significantly reducing runtime.
"""
